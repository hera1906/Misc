set nocompatible              " be iMproved, required
filetype plugin on

" ========================================================
" Vim Setup
" ========================================================
" Set leader to space
noremap "\<Space>" <Nop>
let mapleader = "\<Space>"

set backspace=2   " Backspace deletes like most programs in insert mode
set history=50    " Sets how many lines of history VIM has to remember
set ruler         " show the cursor position all the time
set showcmd       " display incomplete commands
set incsearch     " do incremental searching
set laststatus=2  " Always display the status line
set autowrite     " Automatically :write before running commands

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Turn backup off, since most stuff is in SVN, git et.c anyway...
set nobackup
set nowritebackup
set nowb
set noswapfile    " http://robots.thoughtbot.com/post/18739402579/global-gitignore#comment-458413287


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Folding
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set foldmethod=marker
"set foldmethod=syntax           " Folding based on syntax

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if (&t_Co > 2 || has("gui_running")) && !exists("syntax_on")
  syntax on
endif

augroup vimrcEx
  autocmd!

  " When editing a file, always jump to the last known cursor position.
  " Don't do it for commit messages, when the position is invalid, or when
  " inside an event handler (happens when dropping a file on gvim).
  autocmd BufReadPost *
    \ if &ft != 'gitcommit' && line("'\"") > 0 && line("'\"") <= line("$") |
    \   exe "normal g`\"" |
    \ endif

  " Set syntax highlighting for specific file types
  autocmd BufRead,BufNewFile Appraisals set filetype=ruby
  autocmd BufRead,BufNewFile *.md set filetype=markdown
  autocmd BufRead,BufNewFile .{jscs,jshint,eslint}rc set filetype=json
augroup END

" When the type of shell script is /bin/sh, assume a POSIX-compatible
" shell for syntax highlighting purposes.
let g:is_posix = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Text, tab and indent related
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Softtabs, 4 spaces
set tabstop=4
set shiftwidth=4
set shiftround
set expandtab
set ai "Auto indent
set smartindent
set smarttab

" Linebreak on 500 characters
set lbr
set tw=500
set wrap "Wrap lines

set encoding=utf8
set confirm        " Show dialog box when unsaved changes...

set magic          " For regular expressions turn magic on

set showmatch      " Show matching brackets when text indicator is over them
set mat=1          " How many tenths of a second to blink when matching brackets

set hlsearch       " Highlight search results

set incsearch      " Makes search act like search in modern browsers


" Display extra whitespace
" set list listchars=tab:»·,trail:·,nbsp:·

set nojoinspaces   " Use one space, not two, after punctuation.

"set textwidth=120
"set colorcolumn=+1 " Make it obvious where 80 characters is

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Line Numbers
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"set relativenumber
"set number
"set numberwidth=5

" Tab completion
" will insert tab at beginning of line,
" will use completion if not at beginning
set wildmenu
set wildmode=list:longest,list:full
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction
inoremap <Tab> <c-r>=InsertTabWrapper()<cr>
inoremap <S-Tab> <c-n>

"use system clipboard if avaiable
if has('unnamedplus')
  set clipboard+=unnamedplus
end

" Switch between the last two files
nnoremap <leader><leader> <c-^>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" vim-test mappings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nnoremap <silent> <Leader>t :TestFile<CR>
nnoremap <silent> <Leader>s :TestNearest<CR>
nnoremap <silent> <Leader>l :TestLast<CR>
nnoremap <silent> <Leader>a :TestSuite<CR>
nnoremap <silent> <leader>gt :TestVisit<CR>

" Run commands that require an interactive shell
nnoremap <Leader>r :RunInInteractiveShell<space>

" Treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" Open new split panes to right and bottom, which feels more natural
set splitbelow
set splitright

" Quicker window movement
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-h> <C-w>h
nnoremap <C-l> <C-w>l


" Set spellfile to location that is guaranteed to exist, can be symlinked to
" Dropbox or kept in Git and managed outside of thoughtbot/dotfiles using rcm.
set spellfile=$HOME/.vim-spell-en.utf-8.add

" Autocomplete with dictionary words when spell check is on
set complete+=kspell

" Always use vertical diffs
set diffopt+=vertical

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"netrw
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:netrw_fastbrowse=0 "fix hanging netrw buffer
" nerdtree like setup https://shapeshed.com/vim-netrw/
" run with :Vex
let g:netrw_banner = 0
let g:netrw_liststyle = 3
let g:netrw_browse_split = 4
let g:netrw_altv = 1
let g:netrw_winsize = 20

" =============================================================
" => GUI related
" =============================================================
" Set font according to system
"if has("linux")
"    SET GFn=Consolas\ Regular:h11
"elseif has("unix")
"    set gfn=Menlo\ Regular:11
"endif
"
set guioptions-=r  "remove right-hand scroll bar
set guioptions-=l  "remove left-hand scroll bar

set guifont=Fira\ Code\ 10
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Colors and Fonts
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable syntax highlighting
syntax enable

" must be before setting color scheme
if $TERM == "xterm-256color"
	set t_Co=256
endif

try
    "colorscheme apprentice
    colorscheme pop-punk
catch
endtry

" Clear highlighting and redraw screen on ctrl-l in normal mode
" nnoremap <silent> <C-L> :noh<CR><C-L>

"remove trailing whitespace on save
autocmd BufWritePre * %s/\s\+$//e


" Triger `autoread` when files changes on disk
" https://unix.stackexchange.com/questions/149209/refresh-changed-content-of-file-opened-in-vim/383044#383044
" https://vi.stackexchange.com/questions/13692/prevent-focusgained-autocmd-running-in-command-line-editing-mode
"    autocmd FocusGained,BufEnter,CursorHold,CursorHoldI *
"            \ if mode() !~ '\v(c|r.?|!|t)' && getcmdwintype() == '' | checktime | endif

" Notification after file change
" https://vi.stackexchange.com/questions/13091/autocmd-event-for-autoread
"autocmd FileChangedShellPost *
"  \ echohl WarningMsg | echo "File changed on disk. Buffer reloaded." | echohl None



" ========================================================
" Vundle plugin manager
" ========================================================
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
"
" Keep Plugin commands between vundle#begin/end.

Plugin 'scrooloose/nerdtree'
Plugin 'Xuyuanp/nerdtree-git-plugin'
"Plug 'ajh17/VimCompletesMe'     " Completion plugins
""Plugin 'natebosch/vim-lsc'      " Language server plugin:
""Plugin 'liuchengxu/vista.vim'
Plugin 'm-pilia/vim-ccls'
Plugin 'vim-scripts/DoxygenToolkit.vim'
Plugin 'tpope/vim-commentary'
"Plugin 'ctrlpvim/ctrlp.vim'
Plugin 'rhysd/vim-clang-format'
Plugin 'justinmk/vim-dirvish'
Plugin 'jreybert/vimagit'
Plugin 'tpope/vim-fugitive'
Plugin 'mbbill/undotree'
Plugin 'junegunn/fzf', { 'do': './install --bin' }
Plugin 'junegunn/fzf.vim'
Plugin 'laher/fuzzymenu.vim'
Plugin 'dense-analysis/ale'
Plugin 'vimwiki/vimwiki'
Plugin 'vhdirk/vim-cmake'
"Plugin 'ludovicchabant/vim-gutentags'
"Plugin 'skywind3000/gutentags_plus.git'
Plugin 'ycm-core/YouCompleteMe'
Plugin 'bignimbus/pop-punk.vim'
Plugin 'itchyny/lightline.vim'

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
"

" ==========================================================
" fzf: Fuzzyfinder
" ==========================================================
let $FZF_DEFAULT_COMMAND='ag -l --nocolor --ignore-case'
nnoremap <leader>p :Files<CR>
nnoremap <leader>l :Lines<CR>
nnoremap <leader>b :Buffers<CR>
nnoremap ; :Buffers<CR>

" ==========================================================
" FuzzyMenu
" ==========================================================
nmap <Leader><Leader> <Plug>Fzm
vmap <Leader><Leader> <Plug>FzmVisual
"call fuzzymenu#Add('YouCompleteMe', {'exec': 'YcmCompleter GoTo', 'after': 'call fuzzymenu#InsertMode()', 'help': 'vim key mappings'})
call fuzzymenu#Add('gdb:load1', {'exec': 'packadd termdebug'})
call fuzzymenu#Add('gdb:load2', {'exec': 'Termdebug'})


" ========================================================
" NerdTree
" ========================================================
" C-n opens nerdtree
"map <C-n> :NERDTreeToggle<CR>
map <leader>n :NERDTreeToggle<CR>

" ==========================================================
" The Silver Searcher
" ==========================================================
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor
endif

" ==========================================================
" vim-lsc (Language Server)
" https://github.com/natebosch/vim-lsc
" ==========================================================
" vim-lsc lsp completion
""let g:lsc_server_commands = {
""\ 'cpp': {
""\    'command': 'ccls',
""\    'message_hooks': {
""\        'initialize': {
""\            'initializationOptions': {'cache': {'directory': '/tmp/ccls/cache'}},
""\            'rootUri': {m, p -> lsc#uri#documentUri(fnamemodify(findfile('compile_commands.json', expand('%:p') . ';'), ':p:h'))}
""\        },
""\    },
""\    'log_level': -1,
""\    'suppress_stderr': v:true,
""\  },
""\  'python': {
""\  'command': 'pyls',
""\  },
""\}

" Apply the defaults with a few overrides:
"let g:lsc_auto_map = v:true
""let g:lsc_auto_map = {'defaults': v:true, 'ShowHover': 'K'}

" Use all the defaults (recommended):
"let g:lsc_auto_map = v:true

" Apply the defaults with a few overrides:
"let g:lsc_auto_map = {'defaults': v:true, 'FindReferences': '<leader>r'}

" Setting a value to a blank string leaves that command unmapped:
"let g:lsc_auto_map = {'defaults': v:true, 'FindImplementations': ''}

" ... or set only the commands you want mapped without defaults.
" Complete default mappings are:
"let g:lsc_auto_map = {
"    \ 'GoToDefinition': '<C-]>',
"    \ 'GoToDefinitionSplit': ['<C-W>]', '<C-W><C-]>'],
"    \ 'FindReferences': 'gr',
"    \ 'NextReference': '<C-n>',
"    \ 'PreviousReference': '<C-p>',
"    \ 'FindImplementations': 'gI',
"    \ 'FindCodeActions': 'ga',
"    \ 'Rename': 'gR',
"    \ 'ShowHover': v:true,
"    \ 'DocumentSymbol': 'go',
"    \ 'WorkspaceSymbol': 'gS',
"    \ 'SignatureHelp': 'gm',
"    \ 'Completion': 'completefunc',
"    \}
"
""set completeopt=menu,menuone,noinsert,noselect

""let g:lsc_enable_autocomplete  = v:true
""let g:lsc_enable_diagnostics   = v:false
""let g:lsc_reference_highlights = v:false
""let g:lsc_trace_level          = 'off'

" ==========================================================
" vista.vim
" ==========================================================
" Vista
" Set the executive for some filetypes explicitly. Use the explicit executive
" instead of the default one for these filetypes when using `:Vista` without
" specifying the executive.
""let g:vista_executive_for = {
""  \ 'cpp': 'vim_lsc',
""  \ 'python': 'vim_lsc',
""  \ }


" ==========================================================
" ctrlp
" ==========================================================
"let g:crtlp_map='<F11>'
" search for files
"nnoremap <leader>p :CtrlP<CR>
" search for buffers
"nnoremap <leader>b :CtrlPBuffers:<CR>
" search for buffers
" ripgrep
"if executable('rg')
" " Use rg over grep
" set grepprg=rg\ --vimgrep\ --no-heading
" set grepformat=%f:%l:%c:%m,%f:%l:%m
"
" " Use rg in CtrlP for listing files. Lightning fast and respects .gitignore
" let g:ctrlp_user_command = 'rg --files %s'
"
" " rg is fast enough that CtrlP doesn't need to cache
" let g:ctrlp_use_caching = 0
"else
" let g:ctrlp_user_command = ['.git/', 'git --git-dir=%s/.git ls-files -oc --exclude-standard']
"end


" ==========================================================
" clang-format
" ==========================================================
let g:clang_format#enable_fallback_style = 0
"style based on microsoft
let g:clang_format#style_options = {
\ "AccessModifierOffset" : "-2",
\ "AlignAfterOpenBracket" : "Align",
\ "AlignConsecutiveAssignments" : "false",
\ "AlignConsecutiveDeclarations" : "false",
\ "AlignEscapedNewlines" : "Right",
\ "AlignOperands" : "true",
\ "AlignTrailingComments" : "true",
\ "AllowAllParametersOfDeclarationOnNextLine" : "true",
\ "AllowShortBlocksOnASingleLine" : "false",
\ "AllowShortCaseLabelsOnASingleLine" : "false",
\ "AllowShortFunctionsOnASingleLine" : "None",
\ "AllowShortIfStatementsOnASingleLine" : "false",
\ "AllowShortLoopsOnASingleLine" : "false",
\ "AlwaysBreakAfterDefinitionReturnType" : "None",
\ "AlwaysBreakAfterReturnType" : "None",
\ "AlwaysBreakBeforeMultilineStrings" : "false",
\ "AlwaysBreakTemplateDeclarations" : "MultiLine",
\ "BinPackArguments" : "true",
\ "BinPackParameters" : "true",
\ "BraceWrappingAfterClass" : "true",
\ "BraceWrappingAfterControlStatement" : "true",
\ "BraceWrappingAfterEnum" :       "true",
\ "BraceWrappingAfterFunction" :   "true",
\ "BraceWrappingAfterNamespace" :  "true",
\ "BraceWrappingAfterObjCDeclaration" : "true",
\ "BraceWrappingAfterStruct" :     "true",
\ "BraceWrappingAfterUnion" :      "false",
\ "BraceWrappingAfterExternBlock" : "true",
\ "BraceWrappingBeforeCatch" :     "true",
\ "BraceWrappingBeforeElse" :      "true",
\ "BraceWrappingIndentBraces" :    "false",
\ "BraceWrappingSplitEmptyFunction" : "true",
\ "BraceWrappingSplitEmptyRecord" : "true",
\ "BraceWrappingSplitEmptyNamespace" : "true",
\ "BreakBeforeBinaryOperators" : "None",
\ "BreakBeforeBraces" : "Custom",
\ "BreakBeforeInheritanceComma" : "false",
\ "BreakInheritanceList" : "BeforeColon",
\ "BreakBeforeTernaryOperators" : "true",
\ "BreakConstructorInitializersBeforeComma" : "true",
\ "BreakConstructorInitializers" : "BeforeColon",
\ "BreakAfterJavaFieldAnnotations" : "false",
\ "BreakStringLiterals" : "true",
\ "ColumnLimit" : "120",
\ "CompactNamespaces" : "false",
\ "ConstructorInitializerAllOnOneLineOrOnePerLine" : "false",
\ "ConstructorInitializerIndentWidth" : "4",
\ "ContinuationIndentWidth" : "4",
\ "Cpp11BracedListStyle" : "true",
\ "DerivePointerAlignment" : "false",
\ "DisableFormat" : "false",
\ "ExperimentalAutoDetectBinPacking" : "false",
\ "FixNamespaceComments" : "true",
\ "IncludeBlocks" :   "Preserve",
\ "IndentCaseLabels" : "false",
\ "IndentPPDirectives" : "None",
\ "IndentWidth" : "4",
\ "IndentWrappedFunctionNames" : "false",
\ "JavaScriptQuotes" : "Leave",
\ "JavaScriptWrapImports" : "true",
\ "KeepEmptyLinesAtTheStartOfBlocks" : "true",
\ "MaxEmptyLinesToKeep" : "1",
\ "NamespaceIndentation" : "None",
\ "ObjCBinPackProtocolList" : "Auto",
\ "ObjCBlockIndentWidth" : "2",
\ "ObjCSpaceAfterProperty" : "false",
\ "ObjCSpaceBeforeProtocolList" : "true",
\ "PenaltyBreakAssignment" : "2",
\ "PenaltyBreakBeforeFirstCallParameter" : "19",
\ "PenaltyBreakComment" : "300",
\ "PenaltyBreakFirstLessLess" : "120",
\ "PenaltyBreakString" : "1000",
\ "PenaltyBreakTemplateDeclaration" : "10",
\ "PenaltyExcessCharacter" : "1000000",
\ "PenaltyReturnTypeOnItsOwnLine" : "1000",
\ "PointerAlignment" : "Right",
\ "ReflowComments" : "true",
\ "SortIncludes" : "true",
\ "SortUsingDeclarations" : "true",
\ "SpaceAfterCStyleCast" : "false",
\ "SpaceAfterTemplateKeyword" : "true",
\ "SpaceBeforeAssignmentOperators" : "true",
\ "SpaceBeforeCpp11BracedList" : "false",
\ "SpaceBeforeCtorInitializerColon" : "true",
\ "SpaceBeforeInheritanceColon" : "true",
\ "SpaceBeforeParens" : "ControlStatements",
\ "SpaceBeforeRangeBasedForLoopColon" : "true",
\ "SpaceInEmptyParentheses" : "false",
\ "SpacesBeforeTrailingComments" : "1",
\ "SpacesInAngles" :  "false",
\ "SpacesInContainerLiterals" : "true",
\ "SpacesInCStyleCastParentheses" : "false",
\ "SpacesInParentheses" : "false",
\ "SpacesInSquareBrackets" : "false",
\ "TabWidth" :        "4",
\ "UseTab" :          "Never",
\ "Standard" : "C++11"}

"run clang-format on save very slow on huge files
"augroup clang_format
"    autocmd FileType c,cpp
"       \ autocmd! clang_format BufWritePre <buffer> :ClangFormat
"augroup END

" map to <Leader>cf in C++ code
autocmd FileType c,cpp,objc nnoremap <buffer><Leader>cf :<C-u>ClangFormat<CR>
autocmd FileType c,cpp,objc vnoremap <buffer><Leader>cf :ClangFormat<CR>

" ==========================================================
" UndoTree
" ==========================================================
if has("persistent_undo")
    let myUndoDir = $HOME . "/.vim_undodir"
    call mkdir(myUndoDir, 'p')
    let &undodir = myUndoDir
    set undofile
endif



" ==========================================================
" Ale
" ==========================================================
let g:ale_fixers = {
\    '*': ['remove_trailing_lines', 'trim_whitespace'],
\   'python': ['black'],
\}
let g:ale_linters = {
\   'cpp': ['ccls', 'clang-tidy'],
\   'python': ['flake8'],
\}

let g:ale_cpp_ccls_init_options = {
\   'cache': {
\       'directory': '/tmp/ccls/cache'
\   }
\ }

let g:ale_fix_on_save = 1

" ==========================================================
" Gutentags and Gutentags_plus
" ==========================================================
" enable ctags module
"let g:gutentags_modules = ['ctags', 'gtags_cscope']

" config project root markers
" gutentags will identify current project root by root markers (.git/.svn/.root).
" If project isn't in .git or .svn, then you can add an empty .root file in your project root
"let g:gutentags_project_root = ['.root']

" generate databases in my cache directory, prevent gtags files polluting my project
"let g:gutentags_cache_dir = expand('~/.cache/tags')

" change focus to quickfix window after search (optional)
"let g:gutentags_plus_switch = 1

" Degugging gutentags_plus:
" 1: Add this:
"    :let g:gutentags_define_advanced_commands = 1
" 2: Restart vim and execute command:
"    :GutentagsToggleTrace
" 3: open some file and generate ctags again with current project
"    :GutentagsUpdate
" 4: You may see a lot of gutentags logs, after that:
"    :messages
"    To see the gtags log.

" ==========================================================
" ycm (YouCompleteMe)
" ==========================================================
let g:ycm_clangd_binary_path = "/usr/local/bin/clangd"
nnoremap <leader>jd :YcmCompleter GoTo<CR>
" Add some ycm commands to fuzzymenu:
call fuzzymenu#Add('ycm:GoTo', {'exec': 'YcmCompleter GoTo'})
call fuzzymenu#Add('ycm:Declaration', {'exec': 'YcmCompleter GoToDeclaration'})
call fuzzymenu#Add('ycm:Definition', {'exec': 'YcmCompleter GoToDefinition'})
call fuzzymenu#Add('ycm:References', {'exec': 'YcmCompleter GoToReferences'})
call fuzzymenu#Add('ycm:Implementation', {'exec': 'YcmCompleter GoToImplementation'})
call fuzzymenu#Add('ycm:Type', {'exec': 'YcmCompleter GoToType'})
call fuzzymenu#Add('ycm:GetType', {'exec': 'YcmCompleter GetType'})
call fuzzymenu#Add('ycm:GetDoc', {'exec': 'YcmCompleter GetDoc'})
call fuzzymenu#Add('ycm:Fixit', {'exec': 'YcmCompleter Fixit'})
call fuzzymenu#Add('ycm:Format', {'exec': 'YcmCompleter Format'})

" ==========================================================
" LightLine
" ==========================================================
set noshowmode  " Lightline shows the mode
" Example colorschemes: powerline (default),  wombat, PaperColor, one, jellybeans, solarized, seoul256
let g:lightline = {
      \ 'colorscheme': 'powerline',
      \ }

" Local config
if filereadable($HOME . "/.vimrc.local")
  source ~/.vimrc.local
endif
